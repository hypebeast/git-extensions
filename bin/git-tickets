#!/usr/bin/env bash

# vim :set ft=sh

# Generate a list with all tickets which are included in a specific
# revision, but not in another revision
#
# If this script is in your $PATH it can be called like this:
#
#   git tickets
#
# The script requires git on your system.

PROGNAME="git-tickets"
GIT_LOG_OPTIONS="--oneline"

# Return the name of the current branch
CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`

function _usage() {
cat << EOF
usage: $PROGNAME [<options>] [<start revision>] [<end revision>]
usage: $PROGNAME -h|--help

Generate a list with all tickets which are included in the diff between two revisions.
The ticket numbers are extracted from log messages. The ticket numbers must be in
the form of "[a-zA-Z]{2,}-[0-9]{1,}", but a custom project filter is specified
(with the -f or --filter option).

Use it e.g. to get all tickets that are included in one release branch.

Example usages:

git tickets 15.24.1 15.26.1

This command lists all tickets that are included in branch 15.26.1 but not in
revision 15.24.1.

-------

git tickets 15.24.1

This command lists all tickets that are included in the current active revision
but not in revision 15.24.1.

-------

git tickets

This command lists all tickets that are included in the current active revision
but not in the latest tag. NOTE: This only works with git >= 2.3.3.

-------

git tickets -f "PROJECTNAME-[0-9]{1,4}" 15.24.1 15.26.1

This command lists all tickets that are included in branch 15.26.1 but not in
revision 15.24.1. The ticket numbers must start with "PROJECTNAME-".


OPTIONS:
  -h, --help             Show this message
  -f, --filter           Regex filter for ticket numbers
  -t, --tags             Fetch tags before searching for tickets
EOF
}

function _error() {
  [ $# -eq 0 ] && _usage && exit 0

  echo
  echo "ERROR: " "$@"
  echo
}

#
# Get all tags sorted by version numbers
#
# Note: This works only with git >= 2.3.3
#
function fetch_tags() {
    git tag --sort=v:refname
    #git for-each-ref --format='%(refname)' refs/tags | sort -n | sed "s/^refs\/tags\///"
}

#
# Returns the latest tag (sort by release number)
#
function latest_tag() {
    local tags=$( fetch_tags )
    echo ${tags} | rev | cut -d' ' -f1 | rev
}


trap '_exit' SIGINT SIGQUIT SIGTERM

function main() {
    local filter="[a-zA-Z]{2,}-[0-9]{1,}"
    local start_revision=""
    local end_revision=""
    local project_filter=""
    local fetchTags=false

    # Parse options
    if [[ "$1" == -* ]]; then
        case $1 in
            -h | --help )
            _usage
            exit 1
            ;;
            -f | --filter )
            filter=$2
            shift 2
            ;;
            -t | --tags )
            fetchTags=true
            shift
            ;;
            * )
            _error "Invalid option: $1" && _usage && exit 1
            ;;
        esac
    fi

    if [[ $fetchTags = true ]]; then
        git fetch --tags
    fi

    if [[ "$#" -eq 0 ]]; then
        # If no revisions are specified compare the current revision with the latest tag
        start_revision=$( latest_tag )
        end_revision=$CURRENT_BRANCH
    elif [[ "$#" -eq 1 ]]; then
        # If only the start revision is specified compare it with the current active branch
        start_revision="$1"
        end_revision=$CURRENT_BRANCH
    elif [[ "$#" -eq 2 ]]; then
        start_revision="$1"
        end_revision="$2"
    else
        _error "Invalid usage" && _usage && exit 1
    fi

    git log "$GIT_LOG_OPTIONS" "${start_revision}"'..'"${end_revision}" | egrep -o ${filter} | tr '[:lower:]' '[:upper:]' | sort -u | uniq
}

main "$@"

exit 0
